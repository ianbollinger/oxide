<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">

  <property name="severity" value="warning"/>

  <module name="TreeWalker">
    <!-- annotations ======================================================= -->
    <module name="AnnotationUseStyle"/>
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>
    <module name="PackageAnnotation"/>
    <!-- unused <module name="SuppressWarnings"/>-->

    <!-- block checks ====================================================== -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>

    <!-- class design ====================================================== -->
    <!-- Rationale: final classes are difficult to test. Use package-private
         visibility and/or internal packages to control extension instead. -->
    <!-- <module name="DesignForExtension"/> -->

    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="InnerTypeLast"/>
    <module name="InterfaceIsType"/>
    <module name="MutableException"/>
    <module name="ThrowsCount"/>
    <module name="VisibilityModifier"/>

    <!-- coding =========================================================== -->
    <!-- Rationale: style preference. -->
    <!-- <module name="ArrayTrailingComma"/> -->
    
    <!-- Rationale: inline conditionals increase concision, but use them
         judiciously. --> 
    <!-- <module name="AvoidInlineConditionals"/> -->
   
    <module name="CovariantEquals"/>
    <module name="DoubleCheckedLocking"/>
    <module name="EmptyStatement"/>
    <module name="EqualsAvoidNull"/>
    <module name="EqualsHashCode"/>
    <module name="FinalLocalVariable"/>
    <module name="HiddenField">

      <!-- Rationale: constructor parameters should have the same name as
           their corresponding fields. --> 
      <property name="ignoreConstructorParameter" value="true"/>

      <!-- Rationale: mutator parameters should have the same name as their
           corresponding fields. --> 
      <property name="ignoreSetter" value="true"/>

    </module>
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean,java.lang.Character,java.lang.Byte,java.lang.Double,java.lang.Float,java.lang.Integer,java.lang.Long,java.util.StringBuffer"/>
    </module>

    <!-- Rationale: There aren't tokens in the language that are universally 
         bad (thankfully). -->
    <!--
      <module name="IllegalToken"/>
      <module name="IllegalTokenText"/>
    -->
    <module name="InnerAssignment"/>
    
    <!-- Rationale: while magic numbers are bad, this rule can give very silly
         warnings. For example, "base = 16" does not need a static final
         field. -->
    <!-- <module name="MagicNumber"/> -->

    <module name="MissingSwitchDefault"/>
    <module name="ModifiedControlVariable"/>
    <module name="RedundantThrows"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="NestedForDepth"/>
    <module name="NestedIfDepth"/>
    <module name="NestedTryDepth"/>
    <module name="NoClone"/>
    <module name="NoFinalizer"/>
    <module name="SuperClone"/>

    <!-- Rationale: it's okay to catch Exception if your intention is to wrap
         it in a RuntimeException and propagate it. This can improve
         concision. -->
    <!-- <module name="IllegalCatch"/> -->

    <module name="IllegalThrows"/>
    <module name="PackageDeclaration"/>
    <module name="ReturnCount">
      <property name="severity" value="info"/>
    </module>
    <module name="IllegalType"/>
    <module name="DeclarationOrder"/>
    <module name="ParameterAssignment"/>
    <module name="ExplicitInitialization"/>
    <module name="DefaultComesLast"/>

    <!-- Rationale: default constructors improve concision, and are appropriate
         for package-private classes. -->
    <!-- <module name="MissingCtor"/> -->

    <module name="FallThrough"/>
    <module name="MultipleStringLiterals">
      <property name="severity" value="info"/>
    </module>
    <module name="MultipleVariableDeclarations"/>

    <!-- Rationale: line noise. -->
    <!-- <module name="RequireThis"/> -->
    <module name="UnnecessaryParentheses"/>

    <module name="OneStatementPerLine"/>
    <module name="AvoidStarImport"/>

    <!-- Rationale: static imports can improve concision in some cases. -->
    <!-- <module name="AvoidStaticImport"/> -->

    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>
    <module name="ImportOrder">
      <property name="option" value="top"/>
      <property name="groups" value="java,javax"/>
    </module>
    <!-- unused <module name="ImportControl"/> -->

    <!-- Rationale: only API entries should have Javadoc comments. -->
    <!--
      <module name="JavadocType"/>
      <module name="JavadocMethod"/>
      <module name="JavadocVariable"/>
    -->

    <module name="JavadocStyle"/>

    <!-- Rationale: boolean expression complexity is unavoidable. Complex
         boolean expressions should be extracted from if statements and loop
         conditions into their own methods. -->
    <!-- <module name="BooleanExpressionComplexity"> -->

    <module name="ClassDataAbstractionCoupling">
      <property name="severity" value="info"/>
    </module>
    <module name="ClassFanOutComplexity">
      <property name="severity" value="info"/>
    </module>
    <module name="CyclomaticComplexity">
      <property name="severity" value="info"/>
    </module>
    <module name="NPathComplexity">
      <property name="severity" value="info"/>
    </module>
    <module name="JavaNCSS">
      <property name="severity" value="info"/>
    </module>
    <module name="TodoComment">
      <property name="severity" value="info"/>
    </module>
    <module name="UpperEll"/>
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters"/>
    <module name="Indentation">
      <property name="caseIndent" value="0"/>
    </module>
    <module name="TrailingComment"/>
    <module name="OuterTypeFilename"/>

    <!-- modifiers ========================================================= -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- naming conventions ================================================ -->
    
    <!-- Rationale: AbstractClass is a fine name if Class (partially) implements
         an interface; otherwise, it is an inappropriate name. -->
    <!-- <module name="AbstractClassName"/> -->

    <module name="ClassTypeParameterName"/>
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="MethodTypeParameterName"/>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z]+)*$"/>
    </module>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>

    <!-- size violations =================================================== -->
    <module name="AnonInnerLength">
      <property name="severity" value="info"/>
      <property name="max" value="10"/>
    </module>
    <module name="ExecutableStatementCount">
      <property name="severity" value="info"/>
      <property name="max" value="10"/>
    </module>
    <module name="LineLength"/>
    <module name="MethodCount"/>
    <module name="MethodLength">
      <property name="max" value="50"/>
      <property name="severity" value="info"/>
    </module>
    <module name="OuterTypeNumber"/>
    <module name="ParameterNumber">
      <property name="severity" value="info"/>
      <property name="max" value="3"/>

      <!-- Rationale: constructors have as many parameters as needed to fill
           in their corresponding fields. -->
      <property name="tokens" value="METHOD_DEF"/>

    </module>

    <!-- whitespace ======================================================== -->
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter">
      <property name="allowLineBreaks" value="false"/>
      <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround">
      <property name="tokens" value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,TYPE_EXTENSION_AND"/>
    </module>
  </module>

  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="  [/][/][A-z]"/>
    <property name="message" value="// comments must be followed by a space and be on their own line"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <!-- Rationale: Checkstyle often gets this wrong. Additionally, internal
       packages have no need for Javadocs. -->
  <!-- <module name="JavadocPackage"/> -->

  <module name="FileLength">
    <property name="max" value="500"/>
  </module>
  <module name="FileTabCharacter"/>
  <!-- unused <module name="Translation"/> -->

</module>
